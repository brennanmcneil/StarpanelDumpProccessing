setwd("/Users/mcneiljb/Desktop/VALID/")

#install packages
install.packages(lubridate)
install.packages(dplyr)

#assign path containing CSV formatted data

folder <- "/Users/mcneiljb/Desktop/VALID/"   

#define existing files by assiging to list string

file_list <- list.files(path=folder, pattern="*.csv") 

StarPanelChop <- function(file_list, folder) {
   #read in csv files
     for (i in 1:length(file_list)){
     
                 assign(file_list[i], 
               
               read.csv(paste(folder, file_list[i], sep=''))
               
         )}
     #import and format demographic data (be sure to specify correct path)
    
     VALIDDB <- read_xlsx("/Users/mcneiljb/Desktop/valid db.xlsx")
     VALIDDB$DemographicID=NULL
     VALIDDB$IsExportedFromMayDb=NULL
     VALIDDB$PatientSystemID=NULL
     colnames(VALIDDB)[2] <- "MRN"
     
     VALIDCombine <- rbind(file_list)
     
     colnames(VALIDCombine) <- c("MRN", "Date", "Time", "Test", "Value")
    
     #Convert date to string (or appropriate formatting for handling with lubridate later)
     
     VALIDCombine$Time <- sapply(strsplit(as.character(VALIDCombine$Time), " "), "[", 2)
     
     #remove imported faulty date data from time stamp
     
     format(as.POSIXct(VALIDCombine$Time,format='%m/%d/%Y %H:%M:%S'),format='%H:%M:%S')
     
     #export
     
     write.csv(VALIDCombine, file = "VALIDDataCombine.csv", row.names = FALSE)
     
     #Merge data frames together using left join to retain appropriate data
     
    VALIDJoin <- merge(x=VALIDCombine, y=VALIDDB, by= "MRN", all.x=TRUE)   
    
    #Subset data of interest
     
    VALID <- subset(VALIDJoin, select = c("MRN", "Date", "Time", "Test", "Value", "PatientID", "EnrollmentDate"))
     
     #Clean data and define day difference
     
     VALID$Date <- ymd(VALIDPOC$Date)
     VALID$EnrollmentDate <- ymd(VALIDPOC$EnrollmentDate)
     VALID$Day_Diff <- NA
     
     VALID$Day_Diff<- difftime(VALIDPOC$EnrollmentDate,VALIDPOC$Date,units="days")
     
     #Export
     
     write.csv(VALID, file = "VALIDDayFiltered.csv", row.names = FALSE)
     
     #Separate into data frames by day
     
     library(dpylr)
     
     VALIDD_0 <- filter(VALID, Day_Diff == 0)
     VALIDD_1 <- filter(VALID, Day_Diff == 1)
     VALIDD_2 <- filter(VALID, Day_Diff == 2)
     VALIDD_3 <- filter(VALID, Day_Diff == 3)
     VALIDD_p1 <- filter(VALID, Day_Diff == -1)
     VALIDDD_p2 <- filter(VALID, Day_Diff == -2)
     VALIDDD_p3 <- filter(VALID, Day_Diff == -3)
     
      
    #Select for max and min
    
    # set lab value to numeric for sorting (5 indicates the column number to convert) 
    
    VALIDD_0[,5] <- as.numeric(as.character( VALIDD_0[, 5] ))
    VALIDD_1[,5] <- as.numeric(as.character( VALIDD_1[, 5] ))
    VALIDD_2[,5] <- as.numeric(as.character( VALIDD_2[, 5] ))
    VALIDD_3[,5] <- as.numeric(as.character( VALIDD_3[, 5] ))
    VALIDD_p1[,5] <- as.numeric(as.character( VALIDD_p1[, 5] ))
    VALIDD_p2[,5] <- as.numeric(as.character( VALIDD_p2[, 5] ))
    VALIDD_p3[,5] <- as.numeric(as.character( VALIDD_p3[, 5] ))
    
    #select for max and min
    
    VALIDD_0Max <- aggregate(VALIDD_0$Value, by = list(VALIDD_0$MRN), max)
    colnames(VALIDD_0Max) <- c("MRN", "Max_Value")
    VALIDD_1Max <- aggregate(VALIDD_1$Value, by = list(VALIDD_1$MRN), max)
    colnames(VALIDD_1Max) <- c("MRN", "Max_Value")
    VALIDD_2Max <- aggregate(VALIDD_2$Value, by = list(VALIDD_2$MRN), max)
    colnames(VALIDD_2Max) <- c("MRN", "Max_Value")
    VALIDD_3Max <- aggregate(VALIDD_3$Value, by = list(VALIDD_0$MRN), max)
    colnames(VALIDD_3Max) <- c("MRN", "Max_Value")
    VALIDD_p1Max <- aggregate(VALIDD_p1$Value, by = list(VALIDD_p1$MRN), max)
    colnames(VALIDD_p1Max) <- c("MRN", "Max_Value")
    VALIDD_p2Max <- aggregate(VALIDD_p2$Value, by = list(VALIDD_p2$MRN), max)
    colnames(VALIDD_p2Max) <- c("MRN", "Max_Value")
    VALIDD_p3Max <- aggregate(VALIDD_p3$Value, by = list(VALIDD_p3$MRN), max)
    colnames(VALIDD_p3Max) <- c("MRN", "Max_Value")
   
    VALIDD_0Min <- aggregate(VALIDD_0$Value, by = list(VALIDD_0$MRN), min)
    colnames(VWBCD_0Max) <- c("MRN", "Max_Value")
    VALIDD_1Min <- aggregate(VALIDD_1$Value, by = list(VALIDD_1$MRN), min)
    colnames(VWBCD_0Max) <- c("MRN", "Max_Value")
    VALIDD_2Min <- aggregate(VALIDD_2$Value, by = list(VALIDD_2$MRN), min)
    colnames(VWBCD_0Max) <- c("MRN", "Max_Value")
    VALIDD_3Min <- aggregate(VALIDD_3$Value, by = list(VALIDD_3$MRN), min)
    colnames(VWBCD_0Max) <- c("MRN", "Max_Value")
    VALIDD_p1Min <- aggregate(VALIDD_p1$Value, by = list(VALIDD_p1$MRN), min)
    colnames(VALIDD_p1Min) <- c("MRN", "Max_Value")
    VALIDD_p2Min <- aggregate(VALIDD_p2$Value, by = list(VALIDD_p2$MRN), min)
    colnames(VALIDD_p2Min) <- c("MRN", "Max_Value")
    VALIDD_p3Min <- aggregate(VALIDD_p3$Value, by = list(VALIDD_p3$MRN), min)
    colnames(VALIDD_p3Min) <- c("MRN", "Max_Value")
    
   VALIDD_0MM <- merge(x=VALIDD_0Max, y=VALIDD_0Min, by= "MRN", all.x=TRUE)
   VALIDD_1MM <- merge(x=VALIDD_1Max, y=VALIDD_1Min, by= "MRN", all.x=TRUE)
   VALIDD_2MM <- merge(x=VALIDD_2Max, y=VALIDD_2Min, by= "MRN", all.x=TRUE)
   VALIDD_3MM <- merge(x=VALIDD_3Max, y=VALIDD_3Min, by= "MRN", all.x=TRUE)
   VALIDD_p1MM <- merge(x=VALIDD_p1Max, y=VALIDD_p1Min, by= "MRN", all.x=TRUE)
   VALIDD_p2MM <- merge(x=VALIDD_p2Max, y=VALIDD_p2Min, by= "MRN", all.x=TRUE)
   VALIDD_p3MM <- merge(x=VALIDD_p3Max, y=VALIDD_p3Min, by= "MRN", all.x=TRUE)
    
    
    #output data
   
    write.csv(VALIDD_0MM), "VALIDD_0.csv" row.names = FALSE)
    write.csv(VALIDD_1MM), "VALIDD_1.csv" row.names = FALSE)
    write.csv(VALIDD_2MM), "VALIDD_2.csv" row.names = FALSE)
    write.csv(VALIDD_3MM), "VALIDD_3.csv" row.names = FALSE)
    write.csv(VALIDD_p1MM), "VALIDD_p1.csv" row.names = FALSE)
    write.csv(VALIDD_p2MM), "VALIDD_p2.csv" row.names = FALSE)
    write.csv(VALIDD_p3MM), "VALIDD_p3.csv" row.names = FALSE)
      
    
    }
